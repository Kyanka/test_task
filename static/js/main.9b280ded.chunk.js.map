{"version":3,"sources":["redux/employeesReducer.js","components/EmployeesList/EmployeesList.jsx","components/EmployeesBirthdays/EmployeesBirthdays.jsx","components/MainPage/MainPage.jsx","App.js","redux/store.js","index.js"],"names":["GET_EMPLOYEES","AC","employees","type","payload","initState","employeesReducer","state","action","Employee","props","employee","firstName","lastName","id","useState","isActive","setIsActive","onChange","update","className","name","value","checked","LetterSublist","activeList","sort","a","b","length","map","emp","forEach","EmployeesList","split","letter","employeesByLetter","filter","date","dob","month","parseInt","year","day","MonthSublist","EmployeesBirthdays","current","Date","months","i","getMonth","shift","push","activeEmployees","activeId","index","employeesByMonth","MainPage","dispatch","useDispatch","useSelector","employeesRed","setActiveList","useEffect","axios","get","then","res","data","JSON","parse","window","localStorage","getItem","setItem","stringify","list","findIndex","splice","App","reducers","combineReducers","middleware","applyMiddleware","thunk","store","createStore","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b280ded.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst GET_EMPLOYEES = \"GET_EMPLOYEES\"\r\n\r\nconst AC = {\r\n    getEmployees(employees) {\r\n        return ({type: GET_EMPLOYEES, payload: employees})\r\n    },\r\n};\r\n\r\nexport const getEmployees = () => {\r\n    return (dispatch) => {\r\n        axios.get('https://yalantis-react-school-api.yalantis.com/api/task0/users')\r\n            .then(res => {\r\n                dispatch(AC.getEmployees(res.data))\r\n            })\r\n    }\r\n}\r\n\r\nlet initState = {\r\n    employees: [],\r\n};\r\n\r\nconst employeesReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case GET_EMPLOYEES: {\r\n            return ({...state, employees: action.payload});\r\n        }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n\r\n}\r\nexport default employeesReducer;","import {useState} from \"react\";\r\nimport \"./index.scss\"\r\n\r\nconst Employee = (props) => {\r\n    const {firstName, lastName, id} = props.employee;\r\n    const [isActive, setIsActive] = useState(props.isActive);\r\n    const onChange = () => {\r\n        setIsActive(!isActive)\r\n        props.update(id)\r\n    }\r\n    return (\r\n        <div className=\"employee\">\r\n            <p className={`employee__name--active_${isActive} employee__name`}>{firstName} {lastName}</p>\r\n            <div className=\"employee__action\">\r\n                <span className=\"employee__action--wrapper\">\r\n                    <input className=\"employee__action--input\" onChange={onChange} name={id} type=\"radio\"\r\n                           value=\"not active\" checked={!isActive}/>\r\n                    <span className=\"employee__action--text\">not active</span>\r\n                </span>\r\n                <span>\r\n                    <input className=\"employee__action--input\" onChange={onChange} name={id} type=\"radio\"\r\n                           value=\"active\" checked={isActive}/>\r\n                    <span className=\"employee__action--text\">active</span>\r\n                </span>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nconst LetterSublist = (props) => {\r\n    const {employees, activeList} = props\r\n    employees.sort((a, b) => a.firstName < b.firstName ? -1 : a.firstName > b.firstName ? 1 : 0)\r\n\r\n    return employees.length === 0 ?\r\n        <p className=\"no_data\">No employees</p> :\r\n        employees.map(emp => {\r\n            let isActive = false\r\n            activeList.forEach(id => {\r\n                if (id === emp.id)\r\n                    isActive = true;\r\n            })\r\n            return <Employee key={emp.id} update={props.update} isActive={isActive} employee={emp}/>\r\n        })\r\n}\r\n\r\nconst EmployeesList = (props) => {\r\n    const employees = props.employees ?? [];\r\n    let alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\r\n    return alphabet.map(letter => {\r\n        const employeesByLetter = employees.filter(employee => employee.firstName[0] === letter)\r\n        return (\r\n            <div className=\"list\" key={letter}>\r\n                <p className=\"list__caption\">{letter}</p>\r\n                <LetterSublist update={props.update} activeList={props.activeList} employees={employeesByLetter}/>\r\n            </div>)\r\n    })\r\n}\r\n\r\nexport default EmployeesList","import \"./index.scss\"\r\n\r\nconst Employee = (props) => {\r\n    const {firstName, lastName, id, dob} = props.employee\r\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let date = dob.split(\"-\")\r\n    let month = months[parseInt(date[1], 10) - 1]\r\n    let year = parseInt(date[0], 10)\r\n    let day = parseInt(date[2].split(\"T\")[0], 10)\r\n    return <span key={id} className=\"employee\"><div className=\"employee__dot\"/>\r\n        {firstName} {lastName} {day} {month} {year} year</span>\r\n}\r\n\r\nconst MonthSublist = (props) => {\r\n    const {employees} = props;\r\n    employees.sort((a, b) => a.lastName < b.lastName ? -1 : a.lastName > b.lastName ? 1 : 0)\r\n\r\n    return employees.length !== 0 ?\r\n        employees.map(emp => <Employee key={emp.id} employee={emp}/>) :\r\n        <p className=\"no_data\">No employees</p>\r\n}\r\n\r\nconst EmployeesBirthdays = (props) => {\r\n    const {activeList, employees} = props\r\n\r\n    if (activeList.length === 0 || employees.length === 0) {\r\n        return <p className=\"no_data\">Employees list is empty</p>\r\n    } else {\r\n        //shift months by current\r\n        const current = new Date();\r\n        const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        for (let i = 0; i < current.getMonth(); i++) {\r\n            let month = months.shift()\r\n            months.push(month)\r\n        }\r\n        //sort active employees by activeList\r\n        const activeEmployees = activeList.map(activeId => {\r\n            let employee;\r\n            employees.forEach(emp => {\r\n                if (activeId === emp.id)\r\n                    employee = emp\r\n            })\r\n            return employee\r\n        })\r\n        //\r\n        return months.map((month, index) => {\r\n            index += current.getMonth()\r\n            index = index > 11 ? index - 12 : index\r\n            const employeesByMonth = activeEmployees.filter(employee => parseInt(employee.dob.split(\"-\")[1], 10) - 1 === index)\r\n            return (\r\n                <div className=\"month\" key={month}>\r\n                    <p className=\"month__caption\">{month}</p>\r\n                    <div className=\"month__list\">\r\n                        <MonthSublist employees={employeesByMonth}/>\r\n                    </div>\r\n\r\n                </div>)\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default EmployeesBirthdays","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {getEmployees} from \"../../redux/employeesReducer\"\r\nimport \"./index.scss\"\r\nimport EmployeesList from \"../EmployeesList\";\r\nimport EmployeesBirthdays from \"../EmployeesBirthdays\";\r\n\r\nconst MainPage = () => {\r\n    const dispatch = useDispatch();\r\n    const {employees} = useSelector((state) => state.employeesRed)\r\n    const [activeList, setActiveList] = useState([])\r\n\r\n    const updateActiveList = (id) => {\r\n        const list = [...activeList];\r\n        const index = list.findIndex(activeId => id === activeId)\r\n        if (index >= 0)\r\n            list.splice(index, 1)\r\n        else\r\n            list.push(id)\r\n        setActiveList(list)\r\n\r\n    }\r\n    useEffect(() => {\r\n        dispatch(getEmployees());\r\n        setActiveList(JSON.parse(window.localStorage.getItem('activeList')))\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        window.localStorage.setItem('activeList', JSON.stringify(activeList));\r\n    }, [activeList])\r\n\r\n\r\n    return (\r\n        <main className=\"content\">\r\n            <div className=\"content__employees\">\r\n                <div className=\"content__caption\">Employees</div>\r\n                <div className=\"content__employees--wrapper\">\r\n                    <EmployeesList update={updateActiveList} activeList={activeList} employees={employees}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"content__divider\">\r\n                <div className=\"content__divider--border\"/>\r\n            </div>\r\n            <div className=\"content__birthdays\">\r\n                <div className=\"content__caption\">Employees Birthdays</div>\r\n                <div className=\"content__caption--divider\"/>\r\n                <div className=\"content__birthdays--wrapper\">\r\n                    <EmployeesBirthdays activeList={activeList} employees={employees}/>\r\n                </div>\r\n            </div>\r\n        </main>)\r\n}\r\nexport default MainPage;","import './App.css';\nimport MainPage from \"./components/MainPage\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <MainPage/>\n        </div>\n    );\n}\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\n\r\nimport employeesReducer from \"./employeesReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    employeesRed: employeesReducer,\r\n});\r\nconst middleware = applyMiddleware(thunk)\r\nconst store = createStore(reducers, undefined, middleware);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}